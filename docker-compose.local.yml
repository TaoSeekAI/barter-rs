version: '3.8'

services:
  # Barter Trading System (Local Build)
  barter-strategy:
    build:
      context: .
      dockerfile: Dockerfile
    image: barter-rs:local
    container_name: barter-strategy
    environment:
      # Binance Testnet Configuration
      - EXCHANGE=binance_testnet
      - BINANCE_TESTNET_API_KEY=Wt104kkmijNETENuP4hpJfnGLZxjcjhpH7cYVckIvGAeeI6vxd24Vf8zGKs4lznM
      - BINANCE_TESTNET_API_SECRET=rqh7ifHSsAJOGdoyiRKNzSINqchHCMx5nJ2FtaI9OcMgqXIJOHhpHIpoGXaZRwOu
      - BINANCE_TESTNET=true

      # Trading Configuration
      - TRADING_MODE=paper
      - TRADING_SYMBOL=BTCUSDT
      - TRADING_INTERVAL=1m
      - MAX_POSITION_SIZE=1000
      - RISK_PER_TRADE=0.02

      # System Configuration
      - RUST_LOG=info,barter=debug
      - RUST_BACKTRACE=1

      # Fluvio Configuration (disabled for local testing)
      - FLUVIO_ENABLED=false

      # AI Model Configuration (disabled for local testing)
      - AI_ENABLED=false

    ports:
      - "8080:8080"  # REST API
      - "9090:9090"  # Metrics
    volumes:
      - ./data:/opt/barter/data
      - ./logs:/opt/barter/logs
      - ./config:/opt/barter/config:ro
    networks:
      - barter-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "echo", "healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Local Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    networks:
      - barter-network
    restart: unless-stopped

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - barter-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  barter-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data: